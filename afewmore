#!/bin/bash
# AFEWMORE script
# 20:38 04/16

PROGNAME=$(basename $0)
VERSION='0.0.6'

function usage
{
  #####
  # Function to display usage message (does not exit)
  # No arguments
  #####

  echo "Usage: ${PROGNAME} [-hv] [-d dir] [-n num] instance"
}

function helptext
{
  #####
  #   Function to display help message for program
  #   No arguments
  #####
  cat afewmore.1.txt
}


###########################################################################
#   Program starts here
###########################################################################

# Process command line arguments

num=2
dir=/data

if [ "$1" = "--help" ]; then
    helptext
    exit
fi

# Display usage message if no options or arguments are given

if [ "$1" = "" ]; then
  usage
  exit 1
fi

# Process possible option/argument combinations
verbose=0
while [ $# -ne 1 ]; do
    case $1 in
        -d )    shift
                dir=$1
                ;;
        -n )    shift
                num=$1
                ;;
        -h )    usage
                exit
                ;;
        -v )    verbose=1
                ;;
        * )     usage
                exit 1
    esac
    # echo $#
    shift
done

instance=$1

# echo "The arguments are as follows."
# echo $dir
# echo $num
# echo $instance

InstanceType=$(aws ec2 describe-instances --instance-ids $instance --output text --query 'Reservations[0].Instances[0].InstanceType')
#echo "InstanceType "$InstanceType

PublicDnsName=$(aws ec2 describe-instances --instance-ids $instance --output text --query 'Reservations[0].Instances[0].PublicDnsName')
#echo "PublicDnsName "$PublicDnsName

ImageId=$(aws ec2 describe-instances --instance-ids $instance --output text --query 'Reservations[0].Instances[0].ImageId')
#echo "ImageId "$ImageId

GroupId=$(aws ec2 describe-instances --instance-ids $instance --output text --query 'Reservations[0].Instances[0].SecurityGroups[*].GroupId')
#echo "GroupId "$GroupId

KeyName=$(aws ec2 describe-instances --instance-ids $instance --output text --query 'Reservations[0].Instances[0].KeyName')
#echo "KeyName "$KeyName
if [ "$verbose" = "1" ]; then
    echo "Target instance info received."
fi

userName="root"
aws ec2 run-instances --image-id $ImageId --key-name $KeyName --security-group-ids $GroupId --instance-type $InstanceType --count $num --output text --query 'Instances[*].InstanceId'>tempInstances.txt
if [ "$verbose" = "1" ]; then
    echo "Instances created."
fi
if [ "$ImageId" = "ami-0b33d91d" ]; then
    userName="ec2-user" #amazon linux
elif [ "$ImageId" = "ami-0187f76b" ]; then
    userName="fedora"   #fedora
elif [ "$ImageId" = "ami-d0b520b8" ]; then
    userName="ec2-user" #freebsd
elif [ "$ImageId" = "ami-569ed93c" ]; then
    userName="root"     #netbsd
elif [ "$ImageId" = "ami-50ecc847" ]; then
    userName="root"     #omnios
elif [ "$ImageId" = "ami-6de0dd04" ]; then
    userName="ubuntu"
fi
echo $userName
if [ "$verbose" = "1" ]; then
    scp -o StrictHostKeyChecking=no -i ~/devenv-key.pem -r $userName@$PublicDnsName:$dir tempData/
else
    scp -q -o StrictHostKeyChecking=no -i ~/devenv-key.pem -r $userName@$PublicDnsName:$dir tempData/
fi

if [ "$verbose" = "1" ]; then
    echo "Data copied from target instance."
    echo "Trying to connect to the new instances..this will take less than one minute.."
fi

sleep 55
instances=$(cat tempInstances.txt)
aws ec2 describe-instances --instance-ids $instances --output text --query 'Reservations[*].Instances[*].PublicDnsName' > tempInstances2.txt

lines=$(cat tempInstances2.txt)
if [ "$verbose" = "1" ]; then
    for line in $lines; do
        scp -o StrictHostKeyChecking=no -i ~/devenv-key.pem -r tempData/ $userName@$line:~
    done
else
    for line in $lines; do
        scp -q -o StrictHostKeyChecking=no -i ~/devenv-key.pem -r tempData/ $userName@$line:~
    done
fi


# cleaning temp files
rm -r tempData
#rm tempInstances.txt
#rm tempInstances2.txt
echo $instances | tr " " "\n"

if [ "$verbose" = "1" ]; then
    echo "Temp data cleared."
    echo "Program finished."
fi
# echo $?
